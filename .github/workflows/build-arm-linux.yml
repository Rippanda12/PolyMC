name: Build

on:
  workflow_call:
    inputs:
      build_type:
        description: Type of build (Debug, Release, RelWithDebInfo, MinSizeRel)
        type: string
        default: Debug
    secrets:
      SPARKLE_ED25519_KEY:
        description: Private key for signing Sparkle updates
        required: false

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            qt_ver: 5

          - os: ubuntu-20.04
            qt_ver: 6
            qt_host: linux
            qt_version: '6.2.4'
            qt_modules: 'qt5compat qtimageformats'
            qt_path: /home/runner/work/PolyMC/Qt

    runs-on: ${{ matrix.os }}

    env:
      INSTALL_DIR: "install"
      INSTALL_PORTABLE_DIR: "install-portable"
      INSTALL_APPIMAGE_DIR: "install-appdir"
      BUILD_DIR: "build"
      CCACHE_VAR: ""
      ARTIFACT_CP_PATH: "/artifacts"
      ARTIFACT_DEST_PATH: "/"

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
          
      - name: Build (Qt5 Arm)
        if: matrix.qt_ver == 5
        uses: pguyot/arm-runner-action@v2
        with:
          base_image: https://dietpi.com/downloads/images/DietPi_RPi-ARMv8-Bullseye.7z
          cpu: cortex-a53 # arm64
          copy_artifact_path: ${{ env.ARTIFACT_CP_PATH }}
          copy_artifact_dest: ${{ env.ARTIFACT_DEST_PATH }}
          commands: |
              cd ${repository_path}
              ver_short=`git rev-parse --short HEAD`
              sudo apt-get -y update
              sudo apt-get -y install ninja-build extra-cmake-modules scdoc cmake gcc git
              sudo apt-get -y install qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libqt5core5a libqt5network5 libqt5gui5
              cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DENABLE_LTO=ON -DLauncher_BUILD_PLATFORM=Linux -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CCACHE_VAR }} -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CCACHE_VAR }} -DLauncher_QT_VERSION_MAJOR=${{ matrix.qt_ver }} -G Ninja
              cmake --build ${{ env.BUILD_DIR }}
              ctest --test-dir build --output-on-failure
              cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_DIR }}
              cd ${{ env.INSTALL_DIR }}
              tar --owner root --group root -czf ../PolyMC.tar.gz *
              cd ..
              cp PolyMC.tar.gz ${{ env.ARTIFACT_CP_PATH }}
              cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_PORTABLE_DIR }}
              cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_PORTABLE_DIR }} --component portable
              cd ${{ env.INSTALL_PORTABLE_DIR }}
              tar -czf ../PolyMC-portable.tar.gz *
              cd ..
              cp PolyMC-portable.tar.gz ${{ env.ARTIFACT_CP_PATH }}
              
      ##
      # UPLOAD BUILDS
      ##
      - name: Upload binary tarball (Linux, Qt 5)
        if: runner.os == 'Linux' && matrix.qt_ver != 6
        uses: actions/upload-artifact@v3
        with:
          name: PolyMC-${{ runner.os }}-arm64-${{ env.VERSION }}-${{ inputs.build_type }}
          path: PolyMC.tar.gz

      - name: Upload binary tarball (Linux, portable, Qt 5)
        if: runner.os == 'Linux' && matrix.qt_ver != 6
        uses: actions/upload-artifact@v3
        with:
          name: PolyMC-${{ runner.os }}-arm64-Portable-${{ env.VERSION }}-${{ inputs.build_type }}
          path: PolyMC-portable.tar.gz
